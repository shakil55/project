# -*- coding: utf-8 -*-
"""Image Classification_cat&dog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ETzIaCfoeza1C6i76_rgsjVG1sGQREC

Download Data Set
"""

from google.colab import drive
drive.mount('/content/drive')



!wget https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_5340.zip

"""## Unzip the dataset


"""

!unzip kagglecatsanddogs_5340.zip

!ls

!pip install keras

"""## Import the module

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
import os
import tqdm
import random
from tensorflow.keras.preprocessing.image import load_img
warnings.filterwarnings('ignore')

"""## Create Dataframe for Input and Output

"""

input_path = []
label = []

for class_name in os.listdir("PetImages"):
    for path in os.listdir("PetImages/"+class_name):
        if class_name == 'Cat':
            label.append(0)
        else:
            label.append(1)
        input_path.append(os.path.join("PetImages", class_name, path))
print(input_path[0], label[0])

"""## create the dataframe for processing"""

df = pd.DataFrame()
df['images'] = input_path
df['label'] = label
df = df.sample(frac=1).reset_index(drop=True)
df.head()

"""## Remove non image data"""

for i in df['images']:
    if '.jpg' not in i:
        print(i)

import PIL
l = []
for image in df['images']:
    try:
        img = PIL.Image.open(image)
    except:
        l.append(image)
l

"""## Delete Non Image data"""

df = df[df['images']!='PetImages/Dog/Thumbs.db']
df = df[df['images']!='PetImages/Cat/Thumbs.db']
df = df[df['images']!='PetImages/Cat/666.jpg']
df = df[df['images']!='PetImages/Dog/11702.jpg']
len(df)

"""## Exploratory Data Analysis"""

plt.figure(figsize=(25,25))
temp = df[df['label']==1]['images']
start = random.randint(0, len(temp))
files = temp[start:start+25]

for index, file in enumerate(files):
    plt.subplot(5,5, index+1)
    img = load_img(file)
    img = np.array(img)
    plt.imshow(img)
    plt.title('Dogs')
    plt.axis('off')

plt.figure(figsize=(25,25))
temp = df[df['label']==0]['images']
start = random.randint(0, len(temp))
files = temp[start:start+25]

for index, file in enumerate(files):
    plt.subplot(5,5, index+1)
    img = load_img(file)
    img = np.array(img)
    plt.imshow(img)
    plt.title('Cats')
    plt.axis('off')

"""##Create Data Generator for the Images"""

df['label'] = df['label'].astype('str')
df.head()

"""## split the input data"""

from sklearn.model_selection import train_test_split
train, test = train_test_split(df, test_size=0.2, random_state=42)



from keras.preprocessing.image import ImageDataGenerator
train_generator = ImageDataGenerator(
    rescale = 1./255,  # normalization of images
    rotation_range = 40, # augmention of images to avoid overfitting
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    fill_mode = 'nearest'
)

val_generator = ImageDataGenerator(rescale = 1./255)

train_iterator = train_generator.flow_from_dataframe(
    train,x_col='images',
    y_col='label',
    target_size=(128,128),
    batch_size=512,
    class_mode='binary'
)

val_iterator = val_generator.flow_from_dataframe(
    test,x_col='images',
    y_col='label',
    target_size=(128,128),
    batch_size=512,
    class_mode='binary'
)

"""## Model Creation"""

from keras import Sequential
from keras.layers import Conv2D, MaxPool2D, Flatten, Dense

model = Sequential([
            Conv2D(16, (3,3), activation='relu', input_shape=(128,128,3)),
            MaxPool2D((2,2)),
            Conv2D(32, (3,3), activation='relu'),
            MaxPool2D((2,2)),
            Conv2D(64, (3,3), activation='relu'),
            MaxPool2D((2,2)),
            Flatten(),
            Dense(512, activation='relu'),
            Dense(1, activation='sigmoid')
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

"""## Plot Model"""

import tensorflow.keras as keras
keras.utils.plot_model(
    model,
    show_shapes=True,
    show_dtype=True,
    show_layer_activations=True
)

"""## Train data"""

history = model.fit(train_iterator, epochs=10, validation_data=val_iterator)

model.save("model1_catsVSdogs_10epoch.h5")

"""## Visualization of Results"""

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
epochs = range(len(acc))

plt.plot(epochs, acc, 'b', label='Training Accuracy')
plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')
plt.title('Accuracy Graph')
plt.legend()
plt.figure()

loss = history.history['loss']
val_loss = history.history['val_loss']
plt.plot(epochs, loss, 'b', label='Training Loss')
plt.plot(epochs, val_loss, 'r', label='Validation Loss')
plt.title('Loss Graph')
plt.legend()
plt.show()

"""## Test with Real Image"""

image_path = "/content/drive/MyDrive/Colab Notebooks/dog1.jpg" # path of the image
img = load_img(image_path, target_size=(128, 128))
img = np.array(img)
img = img / 255.0 # normalize the image
img = img.reshape(1, 128, 128, 3) # reshape for prediction
pred = model.predict(img)
if pred[0] > 0.5:
    label = 'Dog'
else:
    label = 'Cat'
print(label)

import numpy as np
from tensorflow.keras.preprocessing.image import load_img
import matplotlib.pyplot as plt

# Load the image
image_path = "/content/drive/MyDrive/Colab Notebooks/dog1.jpg"
img = load_img(image_path, target_size=(128, 128))

# Convert the image to a numpy array and normalize it
img = np.array(img) / 255.0

# Reshape the image for prediction
img = img.reshape(1, 128, 128, 3)

# Make a prediction
pred = model.predict(img)

# Determine the label based on the prediction
if pred[0] > 0.5:
    label = 'Dog'
else:
    label = 'Cat'

# Display the image
plt.imshow(img[0])
plt.title(label)
plt.show()

import numpy as np
from tensorflow.keras.preprocessing.image import load_img
import matplotlib.pyplot as plt

def predict_label(image_path):
    # Load the image
    img = load_img(image_path, target_size=(128, 128))

    # Convert the image to a numpy array and normalize it
    img = np.array(img) / 255.0

    # Reshape the image for prediction
    img = img.reshape(1, 128, 128, 3)

    # Make a prediction
    pred = model.predict(img)

    # Determine the label based on the prediction
    if pred[0] > 0.5:
        label = 'Dog'
    else:
        label = 'Cat'

    return label

# Process multiple images
image_paths = ["/content/drive/MyDrive/Colab Notebooks/dog1.jpg",
               '/content/drive/MyDrive/Colab Notebooks/abyssinian-cat-in-bangladesh-free-photo.jpg']

for path in image_paths:
    label = predict_label(path)
    img = load_img(path, target_size=(128, 128))
    plt.imshow(img)
    plt.title(label)
    plt.show()